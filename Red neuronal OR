#Red Neuronal Xor
#Flores Diaz Fabiola Montserrat

import numpy as np 
from keras.models import Sequential
from keras.layers.core import Dense 
# Se importan las bibliotecas necesarias

training_data = np.array([[0,0],[0,1],[1,0],[1,1]], "float32")
target_data = np.array([[0],[1],[1],[1]], "float32")
# Se definen los datos de entrenamiento y las etiquetas objetivo para la compuerta XOR

model = Sequential() # Se crea un modelo secuencial vacío

model.add(Dense(16,input_dim=2, activation='relu')) # Se agrega una capa oculta con 16 neuronas y función de activación ReLU
model.add(Dense(2, activation='sigmoid')) # Se agrega una capa de salida con 2 neuronas y función de activación sigmoide
# Se define la estructura de la red neuronal

model.compile(loss='mean_squared_error',
               optimizer='adam',
               metrics=['binary_accuracy'])
# Se compila el modelo con la función de pérdida MSE, el optimizador Adam y la métrica de precisión binaria

model.fit(training_data, target_data, epochs=1000)
# Se entrena el modelo con los datos de entrenamiento y las etiquetas objetivo

scores = model.evaluate(training_data, target_data)
# Se evalúa el modelo con los datos de entrenamiento y las etiquetas objetivo

print("\n%s: %.2f%%" % (model.metrics_name[1], scores[1]*100))
print(model.predict(training_data).round())
# Se imprime la precisión binaria y las predicciones de los datos de entrenamiento
